package org.owntracks.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.owntracks.android.db.WaypointIn;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAYPOINT_IN".
*/
public class WaypointInDao extends AbstractDao<WaypointIn, Long> {

    public static final String TABLENAME = "WAYPOINT_IN";

    /**
     * Properties of entity WaypointIn.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Topic = new Property(1, String.class, "topic", false, "TOPIC");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property GeofenceLatitude = new Property(3, double.class, "geofenceLatitude", false, "GEOFENCE_LATITUDE");
        public final static Property GeofenceLongitude = new Property(4, double.class, "geofenceLongitude", false, "GEOFENCE_LONGITUDE");
    };


    public WaypointInDao(DaoConfig config) {
        super(config);
    }
    
    public WaypointInDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAYPOINT_IN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOPIC\" TEXT NOT NULL ," + // 1: topic
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 2: description
                "\"GEOFENCE_LATITUDE\" REAL NOT NULL ," + // 3: geofenceLatitude
                "\"GEOFENCE_LONGITUDE\" REAL NOT NULL );"); // 4: geofenceLongitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAYPOINT_IN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WaypointIn entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTopic());
        stmt.bindString(3, entity.getDescription());
        stmt.bindDouble(4, entity.getGeofenceLatitude());
        stmt.bindDouble(5, entity.getGeofenceLongitude());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WaypointIn readEntity(Cursor cursor, int offset) {
        WaypointIn entity = new WaypointIn( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // topic
            cursor.getString(offset + 2), // description
            cursor.getDouble(offset + 3), // geofenceLatitude
            cursor.getDouble(offset + 4) // geofenceLongitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WaypointIn entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTopic(cursor.getString(offset + 1));
        entity.setDescription(cursor.getString(offset + 2));
        entity.setGeofenceLatitude(cursor.getDouble(offset + 3));
        entity.setGeofenceLongitude(cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WaypointIn entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WaypointIn entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
